/*
 * This file is generated by jOOQ.
 */
package com.github.dnsq.jooq.tables;


import com.github.dnsq.jooq.DefaultSchema;
import com.github.dnsq.jooq.Keys;
import com.github.dnsq.jooq.tables.records.ClickRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class Click extends TableImpl<ClickRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>click</code>
     */
    public static final Click CLICK = new Click();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClickRecord> getRecordType() {
        return ClickRecord.class;
    }

    /**
     * The column <code>click.id</code>.
     */
    public final TableField<ClickRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false)
        .identity(true), this, "");

    /**
     * The column <code>click.count</code>.
     */
    public final TableField<ClickRecord, Integer> COUNT = createField(DSL.name("count"), SQLDataType.INTEGER.nullable(false), this, "");

    private Click(Name alias, Table<ClickRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Click(Name alias, Table<ClickRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>click</code> table reference
     */
    public Click(String alias) {
        this(DSL.name(alias), CLICK);
    }

    /**
     * Create an aliased <code>click</code> table reference
     */
    public Click(Name alias) {
        this(alias, CLICK);
    }

    /**
     * Create a <code>click</code> table reference
     */
    public Click() {
        this(DSL.name("click"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<ClickRecord, Integer> getIdentity() {
        return (Identity<ClickRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ClickRecord> getPrimaryKey() {
        return Keys.CLICK__PK_CLICK;
    }

    @Override
    public Click as(String alias) {
        return new Click(DSL.name(alias), this);
    }

    @Override
    public Click as(Name alias) {
        return new Click(alias, this);
    }

    @Override
    public Click as(Table<?> alias) {
        return new Click(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Click rename(String name) {
        return new Click(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Click rename(Name name) {
        return new Click(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Click rename(Table<?> name) {
        return new Click(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Click where(Condition condition) {
        return new Click(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Click where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Click where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Click where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Click where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Click where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Click where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Click where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Click whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Click whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
