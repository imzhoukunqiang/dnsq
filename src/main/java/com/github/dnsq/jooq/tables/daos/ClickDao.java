/*
 * This file is generated by jOOQ.
 */
package com.github.dnsq.jooq.tables.daos;


import com.github.dnsq.jooq.tables.Click;
import com.github.dnsq.jooq.tables.records.ClickRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import java.util.List;
import java.util.Optional;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class ClickDao extends DAOImpl<ClickRecord, com.github.dnsq.jooq.tables.pojos.Click, Integer> {

    /**
     * Create a new ClickDao without any configuration
     */
    public ClickDao() {
        super(Click.CLICK, com.github.dnsq.jooq.tables.pojos.Click.class);
    }

    /**
     * Create a new ClickDao with an attached configuration
     */
    public ClickDao(Configuration configuration) {
        super(Click.CLICK, com.github.dnsq.jooq.tables.pojos.Click.class, configuration);
    }

    @Override
    public Integer getId(com.github.dnsq.jooq.tables.pojos.Click object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.github.dnsq.jooq.tables.pojos.Click> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Click.CLICK.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.github.dnsq.jooq.tables.pojos.Click> fetchById(Integer... values) {
        return fetch(Click.CLICK.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.github.dnsq.jooq.tables.pojos.Click fetchOneById(Integer value) {
        return fetchOne(Click.CLICK.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<com.github.dnsq.jooq.tables.pojos.Click> fetchOptionalById(Integer value) {
        return fetchOptional(Click.CLICK.ID, value);
    }

    /**
     * Fetch records that have <code>count BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.github.dnsq.jooq.tables.pojos.Click> fetchRangeOfCount(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Click.CLICK.COUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>count IN (values)</code>
     */
    public List<com.github.dnsq.jooq.tables.pojos.Click> fetchByCount(Integer... values) {
        return fetch(Click.CLICK.COUNT, values);
    }
}
